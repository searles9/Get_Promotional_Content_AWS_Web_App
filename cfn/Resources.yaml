Parameters:
    HttpApiName:
      Type: String
      Default: PromoAPI
    ReplyEmail:
      Type: String
      Default: dsearlesaws1@gmail.com
    PromotionalDocumentName:
      Type: String
      Default: FileName.txt
Resources:
  # Created the S3 bucket that stores our promotional content
  myS3PromoBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead

  # Creates the bucket and bucket policy for the S3 static websiute
  S3WEBSITEBUCKET:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: S3SitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3WEBSITEBUCKET
                - /*
      Bucket: !Ref S3WEBSITEBUCKET

  # Creates the HTTP API
  myHttpApi:
      Type: AWS::ApiGatewayV2::Api
      DependsOn: myLambdaFunction
      Properties:
        Name: PromoAPI
        ProtocolType: HTTP
        Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${myLambdaFunction}/invocations
        CorsConfiguration:
          AllowOrigins:
            - "*"
          AllowMethods:
            - POST

  # Permits API gateway to trigger/invoke Lambda
  myApiTriggerLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt myLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [
      "", [
        "arn:aws:execute-api:",
        {"Ref": "AWS::Region"}, ":",
        {"Ref": "AWS::AccountId"}, ":",
        !Ref myHttpApi, "/*/*/*"
        ]
      ]

  # Seta up the integration with API gateway and Lambda
  myApiLambdProxyIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      Description: Lambda Integration
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${myLambdaFunction.Arn}/invocations"
      PayloadFormatVersion: '2.0'
      ApiId: !Ref myHttpApi
      IntegrationType: AWS_PROXY

  # Sets up the route for API gateway
  myRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - myApiLambdProxyIntegration
    Properties:
      ApiId: !Ref myHttpApi
      RouteKey: 'POST /PromoFunction'
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref myApiLambdProxyIntegration

  # Creates a Prod stage in API gateway
  myProdStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      ApiId: !Ref myHttpApi

  # Deploys the API stage
  myAPIDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - myProdStage
    Properties:
      ApiId: !Ref myHttpApi
      Description: Deployment for the prod stage
      StageName: !Ref myProdStage

  # Creates the Lambda function
  myLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          'use strict';
          console.log('Loading function');
          const AWS = require('aws-sdk');
          const sesClient = new AWS.SES();
          const sesReplyAddress = process.env.replyEmailVar;
          const s3link = process.env.linkForS3;

          exports.handler = (event, context, callback) => {
              console.log('Received event:', JSON.stringify(event, null)); //,# with added objects
              var emailObj = JSON.parse(event.body);
              var params = getEmailMessage(emailObj);
              var sendEmailPromise = sesClient.sendEmail(params).promise();

              var response = {
                  statusCode: 200
              };

              sendEmailPromise.then(function(result) {
                  console.log(result);
                  callback(null, response);
              }).catch(function(err) {
                  console.log(err);
                  response.statusCode = 500;
                  callback(null, response);
              });
          };

          function getEmailMessage (emailObj) {
              var emailRequestParams = {
                  Destination: {
                    ToAddresses: [ emailObj.email ]
                  },
                  Message: {
                      Body: {
                          Text: {
                              Data: "Here is your promotional content:" + s3link
                          }
                      },
                      Subject: {
                          Data: "Promotional Content"
                      }
                  },
                  Source: sesReplyAddress,
                  ReplyToAddresses: [ sesReplyAddress ]
              };

              return emailRequestParams;
          }
      Handler: index.handler
      Runtime: nodejs12.x
      FunctionName: PromoFunction
      Role: !GetAtt myLambdaExecutionRole.Arn
      Environment:
        Variables:
          replyEmailVar: !Ref ReplyEmail
          linkForS3: !Sub  "https://${myS3PromoBucket}.s3.amazonaws.com/${PromotionalDocumentName}"

  # Creates the execution role for Lambda which allows sending email with SES and allows logging actions with CloudWatch
  myLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'logs:*'
            Resource:
              - arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - 'ses:SendEmail'
            Resource:
              - '*'

Outputs:
  # Outputs the URL needed for the site
  apiGatewayInvokeURL:
    Value: !Sub https://${myHttpApi}.execute-api.${AWS::Region}.amazonaws.com/${myProdStage}/PromoFunction
  WebsiteURL:
    Value: !GetAtt
      - S3WEBSITEBUCKET
      - WebsiteURL
    Description: URL for website hosted on S3
  WebsiteBucketName:
    Value: !Ref S3WEBSITEBUCKET
  PromotionalContentBucketName:
    Value: !Ref myS3PromoBucket
